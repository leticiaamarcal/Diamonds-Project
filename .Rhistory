install.packages("pacman")
# Libraries ----
if (require(tidyverse) == FALSE) {
install.packages('pacman')
}
pacman::p_load(tidyverse)
# import data
training <- read_csv2('HACKATHON files/train.csv')
# import data
training <- read_csv2('HACKATHON files/train.csv')
training <- read_rds("train.rds")
# import data
training <- read_rda("train.rds")
# import data
training <- readRDS("train.rds")
# import data
training <- readRDS("train.rds")
# Dataset information ----
?diamonds
# The diamonds with a bad cut are in average more expensive
training %>%
ggplot(aes(cut, price)) +
geom_boxplot()
# The diamonds with a bad color are also more expensive
training %>%
ggplot(aes(color, price)) +
geom_boxplot()
# And the diamonds with a bad clarity have a higer price
training %>%
ggplot(aes(clarity, price)) +
geom_boxplot()
View(training)
# The diamonds with a bad color are also more expensive
training %>%
ggplot(aes(color, price)) +
geom_boxplot()
# The diamonds with a bad cut are in average more expensive
training %>%
ggplot(aes(cut, price)) +
geom_boxplot()
# The diamonds with a bad cut are in average more expensive
training %>%
ggplot(aes(cut, price)) +
geom_boxplot()
# The diamonds with a bad color are also more expensive
training %>%
ggplot(aes(color, price)) +
geom_boxplot()
# And the diamonds with a bad clarity have a higer price
training %>%
ggplot(aes(clarity, price)) +
geom_boxplot()
# And the diamonds with a bad clarity have a higer price
training %>%
ggplot(aes(clarity, price)) +
geom_boxplot()
# The diamonds with a bad color are also more expensive
training %>%
ggplot(aes(color, price)) +
geom_boxplot()
training %>%
ggplot(aes(caraty, price)) +
geom_boxplot()
is(training$color)
#
training %>%
ggplot(aes(caraty, price)) +
geom_col()
training %>%
ggplot(aes(carat, price)) +
geom_col()
training %>%
ggplot(aes(carat, price)) +
geom_col() +
scale_y_continuous(labels = dollar)
training %>%
ggplot(aes(carat, price))
training %>%
ggplot(aes(carat, price)) +
geom_col()
training %>%
ggplot(aes(carat, price)) +
geom_col() +
scale_y_continuous(labels = dollar)
training %>%
ggplot(aes(carat, price)) +
geom_col() +
scale_y_continuous(labels = comma)
library(ggplot2)
library(tidyr)
library(dplyr)
library(devtools)
library(scales)
library(grid)
training %>%
ggplot(aes(carat, price)) +
geom_col() +
scale_y_continuous(labels = comma)
training %>%
ggplot(aes(carat, price)) +
geom_col() +
scale_y_continuous(labels = dollar)
training %>%
ggplot(aes(carat, price)) +
geom_col() +
scale_y_continuous(labels = dollar) +
geom_smooth(method="lm", se=F)
#
training %>%
ggplot(aes(carat, price)) +
geom_col() +
scale_y_continuous(labels = dollar) +
geom_smooth(method="lm", se=T)
#
training %>%
ggplot(aes(carat, price)) +
geom_col() +
scale_y_continuous(labels = dollar) +
geom_smooth(method="lm")
#
training %>%
ggplot(aes(carat, price)) +
geom_col() +
scale_y_continuous(labels = dollar) +
geom_curve()
#
training %>%
ggplot(aes(carat, price)) +
geom_col() +
scale_y_continuous(labels = dollar) +
geom_line()
#
training %>%
ggplot(aes(carat, price)) +
geom_col() +
scale_y_continuous(labels = dollar) +
geom_path()
training %>% summarise(mean_price = mean(carat))
training %>% summarise(mean_price = mean(carat)) +
ggplot(aes(carat, price)) +
geom_col() +
scale_y_continuous(labels = dollar)
training %>% cut(carat, 5, include.lowest=TRUE)
is(training$carat)
training %>% cut(carat, 5, include.lowest=TRUE)
training %>% cut(carat, 5, include.lowest=TRUE)
training %>% cut(carat, 5, include.lowest=TRUE) %>%
summarise(mean_price = mean(carat)) +
ggplot(aes(carat, price)) +
geom_col() +
scale_y_continuous(labels = dollar)
cut(training$carat, 5, include.lowest=TRUE)
training %>% cut(training$carat, 5, include.lowest=TRUE)
training %>% cut(carat, 5, include.lowest=TRUE)
training %>%
ggplot(aes(carat, price)) +
geom_col() +
scale_y_continuous(labels = dollar)
training %>%
ggplot(aes(carat, price)) +
geom_boxplot()
training %>%
ggplot(aes(carat)) +
geom_boxplot()
training %>%
ggplot(aes=(carat)) +
geom_boxplot()
training %>%
ggplot(aes=(y=carat)) +
geom_boxplot()
training %>%
ggplot(aes=(carat,price)) +
geom_boxplot()
training %>%
ggplot(aes(carat,price)) +
geom_boxplot()
training %>%
ggplot(aes(carat,price)) +
geom_col()
training %>%
ggplot(aes(carat,price)) +
geom_col() +
scale_y_continuous(labels = dollar)
training %>%
ggplot(aes(cut, carat)) +
geom_boxplot()
# The diamonds with a bad cut are in average more expensive
training %>%
ggplot(aes(cut, price)) +
geom_boxplot()
# The diamonds with a bad cut are in average more expensive
training %>%
ggplot(aes(cut, carat)) +
geom_boxplot()
training %>%
ggplot(aes(cut, price)) +
geom_boxplot()
test <- readRDS("validation_NOprice.rds")
View(test)
# The diamonds with a bad cut are in average more expensive
training %>%
ggplot(aes(cut, price)) +
geom_boxplot()
# The diamonds with a bad color are also more expensive
training %>%
ggplot(aes(color, price)) +
geom_boxplot()
training %>%
ggplot(aes(color, carat)) +
geom_boxplot()
# The diamonds with a bad color are also more expensive
training %>%
ggplot(aes(color, price)) +
geom_boxplot()
#color x weight (carat)
training %>%
ggplot(aes(color, carat)) +
geom_boxplot()
?diamonds
training %>%
ggplot(aes(cut, carat)) +
geom_boxplot()
training %>%
ggplot(aes(clarity, carat)) +
geom_boxplot()
training %>%
ggplot(aes(cut, carat)) +
geom_boxplot()
summary(is.na(training))
corMatrix <- cor(training)
#upload arquivo
existing_products <- read.csv("C:/Users/letic/Documents/UbiqumR/Course2_task3/Data/Raw/existingproductattributes2017.csv")
#separar os atributos nominais em diferentes colunas. Se colocar ., a função
#vai escolher todos os atributos nominais. Se quiser espeficificar qual quer
#transformar, só escrever o nome no atributo na fórmula. Nesse caso estamos separando
#em diferente colunas, porque só queremos olhar para quatro dos 13 tipos de produtos
newDataFrame <- dummyVars(" ~ .", data = existing_products)
cleanData <- data.frame(predict(newDataFrame, newdata = existing_products))
#mudar nomes
colnames(cleanData)[5] <- 'Laptop'
colnames(cleanData)[6] <- 'Netbook'
colnames(cleanData)[7] <- 'PC'
colnames(cleanData)[10] <- 'Smartphone'
#Tranformar o número do produto em ID
rownames(cleanData) <- cleanData$ProductNum
#excluir coluna BestSellersRank (23), porque tem 15 missing values. Exclui também
#todas as colunas com os tipos de produtos que não interessam. E tipo de produto
#e número do produto
cleanData <- cleanData[,-c(1, 2, 3, 4, 8, 9, 11, 12, 13, 23)]
#correlation matrix
corrData <- cor(cleanData)
#plotar o correlation matrix
corrplot(corrData)
library(grid)
library(caret)
library(lattice)
library(corrplot)
corMatrix <- cor(training)
corMatrix <- corMatrix(training)
library(caret)
cor(training)
training
str(training)
diamondsDF <- dummyVars(" ~ .", data = training)
View(diamondsDF)
diamondsData <- data.frame(predict(diamondsDF, newdata = training))
View(diamondsData)
#correlation matrix
corMatrix <- cor(training)
#correlation matrix
corMatrix <- cor(diamondsData)
#plotar o correlation matrix
corrplot(corMatrix)
#reorder columns
diamondsData <- diamondsData[, c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,25)]
#correlation matrix
corMatrix <- cor(diamondsData)
#plotar o correlation matrix
corrplot(corMatrix)
is(corMatrix)
summary(corMatrix)
corMatrix
ggplot(data = training) +
geom_bar(mapping = aes(x = cut))
training %>%  ggplot() +
geom_bar(mapping = aes(x = cut))
ggplot(data = training) +
geom_bar(mapping = aes(x = cut))
ggplot(data = training) +
geom_bar(mapping = aes(x = carat))
training %>% filter(carat == 0.99) %>%
count() %>%
ggplot() +
geom_bar(mapping = aes(x = carat))
training %>% filter(carat == 0.99)
training %>% filter(carat == 0.99) %>%
count()
training %>% filter(carat == 0.99) %>%
count() %>%
ggplot()
training %>% filter(carat == 0.99) %>%
count() %>%
ggplot() +
geom_bar(mapping = aes(x = carat))
ggplot() +
geom_bar(mapping = aes(x = carat))
ggplot(data = training) +
geom_bar(mapping = aes(x = carat))
training %>% filter(carat == 0.99) %>%
count() %>%
ggplot(aes(carat, price)) +
geom_bar()
#barchart counts
ggplot(data = training) +
geom_bar(mapping = aes(x = cut))
#correlation matrix
corMatrix <- cor(diamondsData)
#plotar o correlation matrix
corrplot(corMatrix)
